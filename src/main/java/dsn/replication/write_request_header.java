/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package dsn.replication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-09")
public class write_request_header implements org.apache.thrift.TBase<write_request_header, write_request_header._Fields>, java.io.Serializable, Cloneable, Comparable<write_request_header> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("write_request_header");

    private static final org.apache.thrift.protocol.TField GPID_FIELD_DESC = new org.apache.thrift.protocol.TField("gpid", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new write_request_headerStandardSchemeFactory());
        schemes.put(TupleScheme.class, new write_request_headerTupleSchemeFactory());
    }

    public global_partition_id gpid; // required
    public dsn.base.task_code code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        GPID((short) 1, "gpid"),
        CODE((short) 2, "code");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // GPID
                    return GPID;
                case 2: // CODE
                    return CODE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.GPID, new org.apache.thrift.meta_data.FieldMetaData("gpid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, global_partition_id.class)));
        tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.task_code.class)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(write_request_header.class, metaDataMap);
    }

    public write_request_header() {
    }

    public write_request_header(
            global_partition_id gpid,
            dsn.base.task_code code) {
        this();
        this.gpid = gpid;
        this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public write_request_header(write_request_header other) {
        if (other.isSetGpid()) {
            this.gpid = new global_partition_id(other.gpid);
        }
        if (other.isSetCode()) {
            this.code = new dsn.base.task_code(other.code);
        }
    }

    public write_request_header deepCopy() {
        return new write_request_header(this);
    }

    @Override
    public void clear() {
        this.gpid = null;
        this.code = null;
    }

    public global_partition_id getGpid() {
        return this.gpid;
    }

    public write_request_header setGpid(global_partition_id gpid) {
        this.gpid = gpid;
        return this;
    }

    public void unsetGpid() {
        this.gpid = null;
    }

    /** Returns true if field gpid is set (has been assigned a value) and false otherwise */
    public boolean isSetGpid() {
        return this.gpid != null;
    }

    public void setGpidIsSet(boolean value) {
        if (!value) {
            this.gpid = null;
        }
    }

    public dsn.base.task_code getCode() {
        return this.code;
    }

    public write_request_header setCode(dsn.base.task_code code) {
        this.code = code;
        return this;
    }

    public void unsetCode() {
        this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
        return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
        if (!value) {
            this.code = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case GPID:
                if (value == null) {
                    unsetGpid();
                } else {
                    setGpid((global_partition_id) value);
                }
                break;

            case CODE:
                if (value == null) {
                    unsetCode();
                } else {
                    setCode((dsn.base.task_code) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case GPID:
                return getGpid();

            case CODE:
                return getCode();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case GPID:
                return isSetGpid();
            case CODE:
                return isSetCode();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof write_request_header)
            return this.equals((write_request_header) that);
        return false;
    }

    public boolean equals(write_request_header that) {
        if (that == null)
            return false;

        boolean this_present_gpid = true && this.isSetGpid();
        boolean that_present_gpid = true && that.isSetGpid();
        if (this_present_gpid || that_present_gpid) {
            if (!(this_present_gpid && that_present_gpid))
                return false;
            if (!this.gpid.equals(that.gpid))
                return false;
        }

        boolean this_present_code = true && this.isSetCode();
        boolean that_present_code = true && that.isSetCode();
        if (this_present_code || that_present_code) {
            if (!(this_present_code && that_present_code))
                return false;
            if (!this.code.equals(that.code))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_gpid = true && (isSetGpid());
        list.add(present_gpid);
        if (present_gpid)
            list.add(gpid);

        boolean present_code = true && (isSetCode());
        list.add(present_code);
        if (present_code)
            list.add(code);

        return list.hashCode();
    }

    @Override
    public int compareTo(write_request_header other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetGpid()).compareTo(other.isSetGpid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGpid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpid, other.gpid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("write_request_header(");
        boolean first = true;

        sb.append("gpid:");
        if (this.gpid == null) {
            sb.append("null");
        } else {
            sb.append(this.gpid);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("code:");
        if (this.code == null) {
            sb.append("null");
        } else {
            sb.append(this.code);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (gpid != null) {
            gpid.validate();
        }
        if (code != null) {
            code.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class write_request_headerStandardSchemeFactory implements SchemeFactory {
        public write_request_headerStandardScheme getScheme() {
            return new write_request_headerStandardScheme();
        }
    }

    private static class write_request_headerStandardScheme extends StandardScheme<write_request_header> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, write_request_header struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // GPID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.gpid = new global_partition_id();
                            struct.gpid.read(iprot);
                            struct.setGpidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.code = new dsn.base.task_code();
                            struct.code.read(iprot);
                            struct.setCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, write_request_header struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.gpid != null) {
                oprot.writeFieldBegin(GPID_FIELD_DESC);
                struct.gpid.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.code != null) {
                oprot.writeFieldBegin(CODE_FIELD_DESC);
                struct.code.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class write_request_headerTupleSchemeFactory implements SchemeFactory {
        public write_request_headerTupleScheme getScheme() {
            return new write_request_headerTupleScheme();
        }
    }

    private static class write_request_headerTupleScheme extends TupleScheme<write_request_header> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, write_request_header struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetGpid()) {
                optionals.set(0);
            }
            if (struct.isSetCode()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetGpid()) {
                struct.gpid.write(oprot);
            }
            if (struct.isSetCode()) {
                struct.code.write(oprot);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, write_request_header struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.gpid = new global_partition_id();
                struct.gpid.read(iprot);
                struct.setGpidIsSet(true);
            }
            if (incoming.get(1)) {
                struct.code = new dsn.base.task_code();
                struct.code.read(iprot);
                struct.setCodeIsSet(true);
            }
        }
    }

}

