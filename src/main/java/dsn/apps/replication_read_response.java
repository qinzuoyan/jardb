/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package dsn.apps;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-09")
public class replication_read_response implements org.apache.thrift.TBase<replication_read_response, replication_read_response._Fields>, java.io.Serializable, Cloneable, Comparable<replication_read_response> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replication_read_response");

    private static final org.apache.thrift.protocol.TField EC_FIELD_DESC = new org.apache.thrift.protocol.TField("ec", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField APP_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("app_response", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new replication_read_responseStandardSchemeFactory());
        schemes.put(TupleScheme.class, new replication_read_responseTupleSchemeFactory());
    }

    public dsn.base.error_code ec; // required
    public read_response app_response; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        EC((short) 1, "ec"),
        APP_RESPONSE((short) 2, "app_response");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // EC
                    return EC;
                case 2: // APP_RESPONSE
                    return APP_RESPONSE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.APP_RESPONSE};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.EC, new org.apache.thrift.meta_data.FieldMetaData("ec", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.error_code.class)));
        tmpMap.put(_Fields.APP_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("app_response", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, read_response.class)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replication_read_response.class, metaDataMap);
    }

    public replication_read_response() {
    }

    public replication_read_response(
            dsn.base.error_code ec) {
        this();
        this.ec = ec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replication_read_response(replication_read_response other) {
        if (other.isSetEc()) {
            this.ec = new dsn.base.error_code(other.ec);
        }
        if (other.isSetApp_response()) {
            this.app_response = new read_response(other.app_response);
        }
    }

    public replication_read_response deepCopy() {
        return new replication_read_response(this);
    }

    @Override
    public void clear() {
        this.ec = null;
        this.app_response = null;
    }

    public dsn.base.error_code getEc() {
        return this.ec;
    }

    public replication_read_response setEc(dsn.base.error_code ec) {
        this.ec = ec;
        return this;
    }

    public void unsetEc() {
        this.ec = null;
    }

    /** Returns true if field ec is set (has been assigned a value) and false otherwise */
    public boolean isSetEc() {
        return this.ec != null;
    }

    public void setEcIsSet(boolean value) {
        if (!value) {
            this.ec = null;
        }
    }

    public read_response getApp_response() {
        return this.app_response;
    }

    public replication_read_response setApp_response(read_response app_response) {
        this.app_response = app_response;
        return this;
    }

    public void unsetApp_response() {
        this.app_response = null;
    }

    /** Returns true if field app_response is set (has been assigned a value) and false otherwise */
    public boolean isSetApp_response() {
        return this.app_response != null;
    }

    public void setApp_responseIsSet(boolean value) {
        if (!value) {
            this.app_response = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case EC:
                if (value == null) {
                    unsetEc();
                } else {
                    setEc((dsn.base.error_code) value);
                }
                break;

            case APP_RESPONSE:
                if (value == null) {
                    unsetApp_response();
                } else {
                    setApp_response((read_response) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case EC:
                return getEc();

            case APP_RESPONSE:
                return getApp_response();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case EC:
                return isSetEc();
            case APP_RESPONSE:
                return isSetApp_response();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof replication_read_response)
            return this.equals((replication_read_response) that);
        return false;
    }

    public boolean equals(replication_read_response that) {
        if (that == null)
            return false;

        boolean this_present_ec = true && this.isSetEc();
        boolean that_present_ec = true && that.isSetEc();
        if (this_present_ec || that_present_ec) {
            if (!(this_present_ec && that_present_ec))
                return false;
            if (!this.ec.equals(that.ec))
                return false;
        }

        boolean this_present_app_response = true && this.isSetApp_response();
        boolean that_present_app_response = true && that.isSetApp_response();
        if (this_present_app_response || that_present_app_response) {
            if (!(this_present_app_response && that_present_app_response))
                return false;
            if (!this.app_response.equals(that.app_response))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_ec = true && (isSetEc());
        list.add(present_ec);
        if (present_ec)
            list.add(ec);

        boolean present_app_response = true && (isSetApp_response());
        list.add(present_app_response);
        if (present_app_response)
            list.add(app_response);

        return list.hashCode();
    }

    @Override
    public int compareTo(replication_read_response other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetEc()).compareTo(other.isSetEc());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEc()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ec, other.ec);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetApp_response()).compareTo(other.isSetApp_response());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetApp_response()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_response, other.app_response);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("replication_read_response(");
        boolean first = true;

        sb.append("ec:");
        if (this.ec == null) {
            sb.append("null");
        } else {
            sb.append(this.ec);
        }
        first = false;
        if (isSetApp_response()) {
            if (!first) sb.append(", ");
            sb.append("app_response:");
            if (this.app_response == null) {
                sb.append("null");
            } else {
                sb.append(this.app_response);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (ec != null) {
            ec.validate();
        }
        if (app_response != null) {
            app_response.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class replication_read_responseStandardSchemeFactory implements SchemeFactory {
        public replication_read_responseStandardScheme getScheme() {
            return new replication_read_responseStandardScheme();
        }
    }

    private static class replication_read_responseStandardScheme extends StandardScheme<replication_read_response> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, replication_read_response struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // EC
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.ec = new dsn.base.error_code();
                            struct.ec.read(iprot);
                            struct.setEcIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // APP_RESPONSE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.app_response = new read_response();
                            struct.app_response.read(iprot);
                            struct.setApp_responseIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, replication_read_response struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.ec != null) {
                oprot.writeFieldBegin(EC_FIELD_DESC);
                struct.ec.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.app_response != null) {
                if (struct.isSetApp_response()) {
                    oprot.writeFieldBegin(APP_RESPONSE_FIELD_DESC);
                    struct.app_response.write(oprot);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class replication_read_responseTupleSchemeFactory implements SchemeFactory {
        public replication_read_responseTupleScheme getScheme() {
            return new replication_read_responseTupleScheme();
        }
    }

    private static class replication_read_responseTupleScheme extends TupleScheme<replication_read_response> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, replication_read_response struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetEc()) {
                optionals.set(0);
            }
            if (struct.isSetApp_response()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetEc()) {
                struct.ec.write(oprot);
            }
            if (struct.isSetApp_response()) {
                struct.app_response.write(oprot);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, replication_read_response struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.ec = new dsn.base.error_code();
                struct.ec.read(iprot);
                struct.setEcIsSet(true);
            }
            if (incoming.get(1)) {
                struct.app_response = new read_response();
                struct.app_response.read(iprot);
                struct.setApp_responseIsSet(true);
            }
        }
    }

}

