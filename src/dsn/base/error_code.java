/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dsn.base;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;

import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-09")
public class error_code implements org.apache.thrift.TBase<error_code, error_code._Fields>, java.io.Serializable, Cloneable, Comparable<error_code> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("error_code");

  public enum error_types {
    // ERROR_CODE copy from rDSN
    ERR_OK,
    ERR_UNKNOWN,
    ERR_REPLICATION_FAILURE,
    ERR_APP_EXIST,
    ERR_APP_NOT_EXIST,
    ERR_BUSY_CREATING,
    ERR_BUSY_DROPPING,
    ERR_EXPIRED,
    ERR_LOCK_ALREADY_EXIST,
    ERR_HOLD_BY_OTHERS,
    ERR_RECURSIVE_LOCK,
    ERR_NO_OWNER,
    ERR_NODE_ALREADY_EXIST,
    ERR_INCONSISTENT_STATE,
    ERR_ARRAY_INDEX_OUT_OF_RANGE,
    ERR_SERVICE_NOT_FOUND,
    ERR_SERVICE_ALREADY_RUNNING,
    ERR_IO_PENDING,
    ERR_TIMEOUT,
    ERR_SERVICE_NOT_ACTIVE,
    ERR_BUSY,
    ERR_NETWORK_INIT_FAILED,
    ERR_FORWARD_TO_OTHERS,
    ERR_OBJECT_NOT_FOUND,
    ERR_HANDLER_NOT_FOUND,
    ERR_LEARN_FILE_FAILED,
    ERR_GET_LEARN_STATE_FAILED,
    ERR_INVALID_VERSION,
    ERR_INVALID_PARAMETERS,
    ERR_CAPACITY_EXCEEDED,
    ERR_INVALID_STATE,
    ERR_INACTIVE_STATE,
    ERR_NOT_ENOUGH_MEMBER,
    ERR_FILE_OPERATION_FAILED,
    ERR_HANDLE_EOF,
    ERR_WRONG_CHECKSUM,
    ERR_INVALID_DATA,
    ERR_INVALID_HANDLE,
    ERR_INCOMPLETE_DATA,
    ERR_VERSION_OUTDATED,
    ERR_PATH_NOT_FOUND,
    ERR_PATH_ALREADY_EXIST,
    ERR_ADDRESS_ALREADY_USED,
    ERR_STATE_FREEZED,
    ERR_LOCAL_APP_FAILURE,
    ERR_BIND_IOCP_FAILED,
    ERR_NETWORK_START_FAILED,
    ERR_NOT_IMPLEMENTED,
    ERR_CHECKPOINT_FAILED,
    ERR_WRONG_TIMING,
    ERR_NO_NEED_OPERATE,
    ERR_CORRUPTION,
    ERR_TRY_AGAIN,
    ERR_CLUSTER_NOT_FOUND,
    ERR_CLUSTER_ALREADY_EXIST,
    ERR_ZOOKEEPER_OPERATION,
    ERR_K8S_CLUSTER_NOT_FOUND,
    ERR_K8S_KUBECTL_NOT_FOUND,
    ERR_K8S_DEPLOY_FAILED,
    ERR_K8S_UNDEPLOY_FAILED,
    ERR_RESOURCE_NOT_ENOUGH,
    ERR_WIN_DEPLOY_FAILED,
    ERR_WIN_UNDEPLOY_FAILED,
    ERR_DOCKER_DAEMON_NOT_FOUND,
    ERR_DOCKER_BINARY_NOT_FOUND,
    ERR_DOCKER_DEPLOY_FAILED,
    ERR_DOCKER_UNDEPLOY_FAILED, 
    
    //ERROR_CODE defined by client
    ERR_NO_PRIMARY,
    ERR_NO_REPLICA, 
    ERR_NO_META_SERVER,
    ERR_READ_TABLE_FAILED
  };
  
  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new error_codeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new error_codeTupleSchemeFactory());
  }

  public error_types errno;
  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(error_code.class, metaDataMap);
  }

  public error_code(error_types err_enum_type) {
    errno = err_enum_type;
  }
  public void set_error_type(error_types err_enum_type)
  {
    errno = err_enum_type;
  }
  
  public error_code() {
    errno = error_types.ERR_UNKNOWN;
  }

  public error_code(String message) {
    errno = error_types.valueOf(message);
  }
  /**
   * Performs a deep copy on <i>other</i>.
   */
  public error_code(error_code other) {
  this.errno = other.errno;
  }

  public error_code deepCopy() {
    return new error_code(this);
  }

  @Override
  public void clear() {
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof error_code)
      return this.equals((error_code)that);
    return false;
  }

  public boolean equals(error_code that) {
    if (that == null)
      return false;
    return this.errno.equals(that.errno);
  }

  @Override
  public int hashCode() {
  return this.errno.hashCode();
  }

  @Override
  public int compareTo(error_code other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }
    return this.errno.compareTo(other.errno);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("error_code(");
    sb.append(String.valueOf(errno));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class error_codeStandardSchemeFactory implements SchemeFactory {
    public error_codeStandardScheme getScheme() {
      return new error_codeStandardScheme();
    }
  }

  private static class error_codeStandardScheme extends StandardScheme<error_code> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, error_code struct) throws org.apache.thrift.TException {
      String err_message = iprot.readString();
      struct.errno = error_types.valueOf(err_message);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, error_code struct) throws org.apache.thrift.TException {
      oprot.writeString(String.valueOf(struct.errno));
    }

  }

  private static class error_codeTupleSchemeFactory implements SchemeFactory {
    public error_codeTupleScheme getScheme() {
      return new error_codeTupleScheme();
    }
  }

  private static class error_codeTupleScheme extends TupleScheme<error_code> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, error_code struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, error_code struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
    }
  }

}

