/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dsn.apps;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-09")
public class replication_write_response implements org.apache.thrift.TBase<replication_write_response, replication_write_response._Fields>, java.io.Serializable, Cloneable, Comparable<replication_write_response> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replication_write_response");

  private static final org.apache.thrift.protocol.TField EC_FIELD_DESC = new org.apache.thrift.protocol.TField("ec", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField APP_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("app_response", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new replication_write_responseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new replication_write_responseTupleSchemeFactory());
  }

  public dsn.base.error_code ec; // required
  public int app_response; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EC((short)1, "ec"),
    APP_RESPONSE((short)2, "app_response");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EC
          return EC;
        case 2: // APP_RESPONSE
          return APP_RESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APP_RESPONSE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APP_RESPONSE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EC, new org.apache.thrift.meta_data.FieldMetaData("ec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.error_code.class)));
    tmpMap.put(_Fields.APP_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("app_response", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replication_write_response.class, metaDataMap);
  }

  public replication_write_response() {
  }

  public replication_write_response(
    dsn.base.error_code ec)
  {
    this();
    this.ec = ec;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public replication_write_response(replication_write_response other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEc()) {
      this.ec = new dsn.base.error_code(other.ec);
    }
    this.app_response = other.app_response;
  }

  public replication_write_response deepCopy() {
    return new replication_write_response(this);
  }

  @Override
  public void clear() {
    this.ec = null;
    setApp_responseIsSet(false);
    this.app_response = 0;
  }

  public dsn.base.error_code getEc() {
    return this.ec;
  }

  public replication_write_response setEc(dsn.base.error_code ec) {
    this.ec = ec;
    return this;
  }

  public void unsetEc() {
    this.ec = null;
  }

  /** Returns true if field ec is set (has been assigned a value) and false otherwise */
  public boolean isSetEc() {
    return this.ec != null;
  }

  public void setEcIsSet(boolean value) {
    if (!value) {
      this.ec = null;
    }
  }

  public int getApp_response() {
    return this.app_response;
  }

  public replication_write_response setApp_response(int app_response) {
    this.app_response = app_response;
    setApp_responseIsSet(true);
    return this;
  }

  public void unsetApp_response() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APP_RESPONSE_ISSET_ID);
  }

  /** Returns true if field app_response is set (has been assigned a value) and false otherwise */
  public boolean isSetApp_response() {
    return EncodingUtils.testBit(__isset_bitfield, __APP_RESPONSE_ISSET_ID);
  }

  public void setApp_responseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APP_RESPONSE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EC:
      if (value == null) {
        unsetEc();
      } else {
        setEc((dsn.base.error_code)value);
      }
      break;

    case APP_RESPONSE:
      if (value == null) {
        unsetApp_response();
      } else {
        setApp_response((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EC:
      return getEc();

    case APP_RESPONSE:
      return getApp_response();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EC:
      return isSetEc();
    case APP_RESPONSE:
      return isSetApp_response();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof replication_write_response)
      return this.equals((replication_write_response)that);
    return false;
  }

  public boolean equals(replication_write_response that) {
    if (that == null)
      return false;

    boolean this_present_ec = true && this.isSetEc();
    boolean that_present_ec = true && that.isSetEc();
    if (this_present_ec || that_present_ec) {
      if (!(this_present_ec && that_present_ec))
        return false;
      if (!this.ec.equals(that.ec))
        return false;
    }

    boolean this_present_app_response = true && this.isSetApp_response();
    boolean that_present_app_response = true && that.isSetApp_response();
    if (this_present_app_response || that_present_app_response) {
      if (!(this_present_app_response && that_present_app_response))
        return false;
      if (this.app_response != that.app_response)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ec = true && (isSetEc());
    list.add(present_ec);
    if (present_ec)
      list.add(ec);

    boolean present_app_response = true && (isSetApp_response());
    list.add(present_app_response);
    if (present_app_response)
      list.add(app_response);

    return list.hashCode();
  }

  @Override
  public int compareTo(replication_write_response other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEc()).compareTo(other.isSetEc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ec, other.ec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp_response()).compareTo(other.isSetApp_response());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp_response()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_response, other.app_response);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("replication_write_response(");
    boolean first = true;

    sb.append("ec:");
    if (this.ec == null) {
      sb.append("null");
    } else {
      sb.append(this.ec);
    }
    first = false;
    if (isSetApp_response()) {
      if (!first) sb.append(", ");
      sb.append("app_response:");
      sb.append(this.app_response);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ec != null) {
      ec.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class replication_write_responseStandardSchemeFactory implements SchemeFactory {
    public replication_write_responseStandardScheme getScheme() {
      return new replication_write_responseStandardScheme();
    }
  }

  private static class replication_write_responseStandardScheme extends StandardScheme<replication_write_response> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, replication_write_response struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ec = new dsn.base.error_code();
              struct.ec.read(iprot);
              struct.setEcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.app_response = iprot.readI32();
              struct.setApp_responseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, replication_write_response struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ec != null) {
        oprot.writeFieldBegin(EC_FIELD_DESC);
        struct.ec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetApp_response()) {
        oprot.writeFieldBegin(APP_RESPONSE_FIELD_DESC);
        oprot.writeI32(struct.app_response);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class replication_write_responseTupleSchemeFactory implements SchemeFactory {
    public replication_write_responseTupleScheme getScheme() {
      return new replication_write_responseTupleScheme();
    }
  }

  private static class replication_write_responseTupleScheme extends TupleScheme<replication_write_response> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, replication_write_response struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEc()) {
        optionals.set(0);
      }
      if (struct.isSetApp_response()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetEc()) {
        struct.ec.write(oprot);
      }
      if (struct.isSetApp_response()) {
        oprot.writeI32(struct.app_response);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, replication_write_response struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.ec = new dsn.base.error_code();
        struct.ec.read(iprot);
        struct.setEcIsSet(true);
      }
      if (incoming.get(1)) {
        struct.app_response = iprot.readI32();
        struct.setApp_responseIsSet(true);
      }
    }
  }

}

