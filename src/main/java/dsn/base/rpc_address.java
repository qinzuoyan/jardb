/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package dsn.base;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.util.Arrays;

import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-09")
public class rpc_address implements org.apache.thrift.TBase<rpc_address, rpc_address._Fields>, java.io.Serializable, Cloneable, Comparable<rpc_address> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpc_address");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new rpc_addressStandardSchemeFactory());
        schemes.put(TupleScheme.class, new rpc_addressTupleSchemeFactory());
    }

    public long address;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ;

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpc_address.class, metaDataMap);
    }

    public rpc_address() {
        this.address = 0;
    }

    public boolean isInvalid() {
        return this.address == 0;
    }

    public String get_ip() throws UnknownHostException {
        byte[] byte_array = new byte[]{
                (byte) (0xff & (address >> 56)),
                (byte) (0xff & (address >> 48)),
                (byte) (0xff & (address >> 40)),
                (byte) (0xff & (address >> 32))
        };
        return InetAddress.getByAddress(byte_array).getHostAddress();
    }

    public int get_port() {
        return (int) (0xffff & (address >> 16));
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpc_address(rpc_address other) {
        this.address = other.address;
    }

    public rpc_address deepCopy() {
        return new rpc_address(this);
    }

    @Override
    public void clear() {
        this.address = 0;
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof rpc_address)
            return this.equals((rpc_address) that);
        return false;
    }

    public boolean equals(rpc_address that) {
        if (that == null)
            return false;
        return address == that.address;
    }

    @Override
    public int hashCode() {
        return Long.hashCode(address);
    }

    @Override
    public int compareTo(rpc_address other) {
        return Long.compare(address, other.address);
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("rpc_address(");
        try {
            sb.append(get_ip());
        } catch (UnknownHostException e) {
            sb.append("invalid_addr");
        }
        sb.append(":");
        sb.append(String.valueOf(get_port()));
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class rpc_addressStandardSchemeFactory implements SchemeFactory {
        public rpc_addressStandardScheme getScheme() {
            return new rpc_addressStandardScheme();
        }
    }

    private static class rpc_addressStandardScheme extends StandardScheme<rpc_address> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, rpc_address struct) throws org.apache.thrift.TException {
            struct.address = iprot.readI64();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, rpc_address struct) throws org.apache.thrift.TException {
            oprot.writeI64(struct.address);
        }

    }

    private static class rpc_addressTupleSchemeFactory implements SchemeFactory {
        public rpc_addressTupleScheme getScheme() {
            return new rpc_addressTupleScheme();
        }
    }

    private static class rpc_addressTupleScheme extends TupleScheme<rpc_address> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, rpc_address struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, rpc_address struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
        }
    }

}

