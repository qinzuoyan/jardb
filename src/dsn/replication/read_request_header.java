/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dsn.replication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-09")
public class read_request_header implements org.apache.thrift.TBase<read_request_header, read_request_header._Fields>, java.io.Serializable, Cloneable, Comparable<read_request_header> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_request_header");

  private static final org.apache.thrift.protocol.TField GPID_FIELD_DESC = new org.apache.thrift.protocol.TField("gpid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SEMANTIC_FIELD_DESC = new org.apache.thrift.protocol.TField("semantic", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_DECREE_FIELD_DESC = new org.apache.thrift.protocol.TField("version_decree", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new read_request_headerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new read_request_headerTupleSchemeFactory());
  }

  public global_partition_id gpid; // required
  public dsn.base.task_code code; // required
  /**
   * 
   * @see read_semantic
   */
  public read_semantic semantic; // required
  public long version_decree; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GPID((short)1, "gpid"),
    CODE((short)2, "code"),
    /**
     * 
     * @see read_semantic
     */
    SEMANTIC((short)3, "semantic"),
    VERSION_DECREE((short)4, "version_decree");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GPID
          return GPID;
        case 2: // CODE
          return CODE;
        case 3: // SEMANTIC
          return SEMANTIC;
        case 4: // VERSION_DECREE
          return VERSION_DECREE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_DECREE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GPID, new org.apache.thrift.meta_data.FieldMetaData("gpid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, global_partition_id.class)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.task_code.class)));
    tmpMap.put(_Fields.SEMANTIC, new org.apache.thrift.meta_data.FieldMetaData("semantic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, read_semantic.class)));
    tmpMap.put(_Fields.VERSION_DECREE, new org.apache.thrift.meta_data.FieldMetaData("version_decree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_request_header.class, metaDataMap);
  }

  public read_request_header() {
    this.semantic = dsn.replication.read_semantic.ReadLastUpdate;

    this.version_decree = -1L;

  }

  public read_request_header(
    global_partition_id gpid,
    dsn.base.task_code code,
    read_semantic semantic,
    long version_decree)
  {
    this();
    this.gpid = gpid;
    this.code = code;
    this.semantic = semantic;
    this.version_decree = version_decree;
    setVersion_decreeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public read_request_header(read_request_header other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGpid()) {
      this.gpid = new global_partition_id(other.gpid);
    }
    if (other.isSetCode()) {
      this.code = new dsn.base.task_code(other.code);
    }
    if (other.isSetSemantic()) {
      this.semantic = other.semantic;
    }
    this.version_decree = other.version_decree;
  }

  public read_request_header deepCopy() {
    return new read_request_header(this);
  }

  @Override
  public void clear() {
    this.gpid = null;
    this.code = null;
    this.semantic = dsn.replication.read_semantic.ReadLastUpdate;

    this.version_decree = -1L;

  }

  public global_partition_id getGpid() {
    return this.gpid;
  }

  public read_request_header setGpid(global_partition_id gpid) {
    this.gpid = gpid;
    return this;
  }

  public void unsetGpid() {
    this.gpid = null;
  }

  /** Returns true if field gpid is set (has been assigned a value) and false otherwise */
  public boolean isSetGpid() {
    return this.gpid != null;
  }

  public void setGpidIsSet(boolean value) {
    if (!value) {
      this.gpid = null;
    }
  }

  public dsn.base.task_code getCode() {
    return this.code;
  }

  public read_request_header setCode(dsn.base.task_code code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  /**
   * 
   * @see read_semantic
   */
  public read_semantic getSemantic() {
    return this.semantic;
  }

  /**
   * 
   * @see read_semantic
   */
  public read_request_header setSemantic(read_semantic semantic) {
    this.semantic = semantic;
    return this;
  }

  public void unsetSemantic() {
    this.semantic = null;
  }

  /** Returns true if field semantic is set (has been assigned a value) and false otherwise */
  public boolean isSetSemantic() {
    return this.semantic != null;
  }

  public void setSemanticIsSet(boolean value) {
    if (!value) {
      this.semantic = null;
    }
  }

  public long getVersion_decree() {
    return this.version_decree;
  }

  public read_request_header setVersion_decree(long version_decree) {
    this.version_decree = version_decree;
    setVersion_decreeIsSet(true);
    return this;
  }

  public void unsetVersion_decree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_DECREE_ISSET_ID);
  }

  /** Returns true if field version_decree is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_decree() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_DECREE_ISSET_ID);
  }

  public void setVersion_decreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_DECREE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GPID:
      if (value == null) {
        unsetGpid();
      } else {
        setGpid((global_partition_id)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((dsn.base.task_code)value);
      }
      break;

    case SEMANTIC:
      if (value == null) {
        unsetSemantic();
      } else {
        setSemantic((read_semantic)value);
      }
      break;

    case VERSION_DECREE:
      if (value == null) {
        unsetVersion_decree();
      } else {
        setVersion_decree((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GPID:
      return getGpid();

    case CODE:
      return getCode();

    case SEMANTIC:
      return getSemantic();

    case VERSION_DECREE:
      return getVersion_decree();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GPID:
      return isSetGpid();
    case CODE:
      return isSetCode();
    case SEMANTIC:
      return isSetSemantic();
    case VERSION_DECREE:
      return isSetVersion_decree();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof read_request_header)
      return this.equals((read_request_header)that);
    return false;
  }

  public boolean equals(read_request_header that) {
    if (that == null)
      return false;

    boolean this_present_gpid = true && this.isSetGpid();
    boolean that_present_gpid = true && that.isSetGpid();
    if (this_present_gpid || that_present_gpid) {
      if (!(this_present_gpid && that_present_gpid))
        return false;
      if (!this.gpid.equals(that.gpid))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_semantic = true && this.isSetSemantic();
    boolean that_present_semantic = true && that.isSetSemantic();
    if (this_present_semantic || that_present_semantic) {
      if (!(this_present_semantic && that_present_semantic))
        return false;
      if (!this.semantic.equals(that.semantic))
        return false;
    }

    boolean this_present_version_decree = true;
    boolean that_present_version_decree = true;
    if (this_present_version_decree || that_present_version_decree) {
      if (!(this_present_version_decree && that_present_version_decree))
        return false;
      if (this.version_decree != that.version_decree)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gpid = true && (isSetGpid());
    list.add(present_gpid);
    if (present_gpid)
      list.add(gpid);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_semantic = true && (isSetSemantic());
    list.add(present_semantic);
    if (present_semantic)
      list.add(semantic.getValue());

    boolean present_version_decree = true;
    list.add(present_version_decree);
    if (present_version_decree)
      list.add(version_decree);

    return list.hashCode();
  }

  @Override
  public int compareTo(read_request_header other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGpid()).compareTo(other.isSetGpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpid, other.gpid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSemantic()).compareTo(other.isSetSemantic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSemantic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semantic, other.semantic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion_decree()).compareTo(other.isSetVersion_decree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_decree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_decree, other.version_decree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("read_request_header(");
    boolean first = true;

    sb.append("gpid:");
    if (this.gpid == null) {
      sb.append("null");
    } else {
      sb.append(this.gpid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("semantic:");
    if (this.semantic == null) {
      sb.append("null");
    } else {
      sb.append(this.semantic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version_decree:");
    sb.append(this.version_decree);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (gpid != null) {
      gpid.validate();
    }
    if (code != null) {
      code.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class read_request_headerStandardSchemeFactory implements SchemeFactory {
    public read_request_headerStandardScheme getScheme() {
      return new read_request_headerStandardScheme();
    }
  }

  private static class read_request_headerStandardScheme extends StandardScheme<read_request_header> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, read_request_header struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GPID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gpid = new global_partition_id();
              struct.gpid.read(iprot);
              struct.setGpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.code = new dsn.base.task_code();
              struct.code.read(iprot);
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEMANTIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.semantic = dsn.replication.read_semantic.findByValue(iprot.readI32());
              struct.setSemanticIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_DECREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_decree = iprot.readI64();
              struct.setVersion_decreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, read_request_header struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gpid != null) {
        oprot.writeFieldBegin(GPID_FIELD_DESC);
        struct.gpid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        struct.code.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.semantic != null) {
        oprot.writeFieldBegin(SEMANTIC_FIELD_DESC);
        oprot.writeI32(struct.semantic.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_DECREE_FIELD_DESC);
      oprot.writeI64(struct.version_decree);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class read_request_headerTupleSchemeFactory implements SchemeFactory {
    public read_request_headerTupleScheme getScheme() {
      return new read_request_headerTupleScheme();
    }
  }

  private static class read_request_headerTupleScheme extends TupleScheme<read_request_header> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, read_request_header struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGpid()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetSemantic()) {
        optionals.set(2);
      }
      if (struct.isSetVersion_decree()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGpid()) {
        struct.gpid.write(oprot);
      }
      if (struct.isSetCode()) {
        struct.code.write(oprot);
      }
      if (struct.isSetSemantic()) {
        oprot.writeI32(struct.semantic.getValue());
      }
      if (struct.isSetVersion_decree()) {
        oprot.writeI64(struct.version_decree);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, read_request_header struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.gpid = new global_partition_id();
        struct.gpid.read(iprot);
        struct.setGpidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = new dsn.base.task_code();
        struct.code.read(iprot);
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.semantic = dsn.replication.read_semantic.findByValue(iprot.readI32());
        struct.setSemanticIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version_decree = iprot.readI64();
        struct.setVersion_decreeIsSet(true);
      }
    }
  }

}

