/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package dsn.replication;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-09")
public class partition_configuration implements org.apache.thrift.TBase<partition_configuration, partition_configuration._Fields>, java.io.Serializable, Cloneable, Comparable<partition_configuration> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partition_configuration");

    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("app_type", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField GPID_FIELD_DESC = new org.apache.thrift.protocol.TField("gpid", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
    private static final org.apache.thrift.protocol.TField BALLOT_FIELD_DESC = new org.apache.thrift.protocol.TField("ballot", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField MAX_REPLICA_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("max_replica_count", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField PRIMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("primary", org.apache.thrift.protocol.TType.STRUCT, (short) 5);
    private static final org.apache.thrift.protocol.TField SECONDARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("secondaries", org.apache.thrift.protocol.TType.LIST, (short) 6);
    private static final org.apache.thrift.protocol.TField LAST_DROPS_FIELD_DESC = new org.apache.thrift.protocol.TField("last_drops", org.apache.thrift.protocol.TType.LIST, (short) 7);
    private static final org.apache.thrift.protocol.TField LAST_COMMITTED_DECREE_FIELD_DESC = new org.apache.thrift.protocol.TField("last_committed_decree", org.apache.thrift.protocol.TType.I64, (short) 8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new partition_configurationStandardSchemeFactory());
        schemes.put(TupleScheme.class, new partition_configurationTupleSchemeFactory());
    }

    public String app_type; // required
    public global_partition_id gpid; // required
    public long ballot; // required
    public int max_replica_count; // required
    public dsn.base.rpc_address primary; // required
    public List<dsn.base.rpc_address> secondaries; // required
    public List<dsn.base.rpc_address> last_drops; // required
    public long last_committed_decree; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        APP_TYPE((short) 1, "app_type"),
        GPID((short) 2, "gpid"),
        BALLOT((short) 3, "ballot"),
        MAX_REPLICA_COUNT((short) 4, "max_replica_count"),
        PRIMARY((short) 5, "primary"),
        SECONDARIES((short) 6, "secondaries"),
        LAST_DROPS((short) 7, "last_drops"),
        LAST_COMMITTED_DECREE((short) 8, "last_committed_decree");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // APP_TYPE
                    return APP_TYPE;
                case 2: // GPID
                    return GPID;
                case 3: // BALLOT
                    return BALLOT;
                case 4: // MAX_REPLICA_COUNT
                    return MAX_REPLICA_COUNT;
                case 5: // PRIMARY
                    return PRIMARY;
                case 6: // SECONDARIES
                    return SECONDARIES;
                case 7: // LAST_DROPS
                    return LAST_DROPS;
                case 8: // LAST_COMMITTED_DECREE
                    return LAST_COMMITTED_DECREE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __BALLOT_ISSET_ID = 0;
    private static final int __MAX_REPLICA_COUNT_ISSET_ID = 1;
    private static final int __LAST_COMMITTED_DECREE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("app_type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.GPID, new org.apache.thrift.meta_data.FieldMetaData("gpid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, global_partition_id.class)));
        tmpMap.put(_Fields.BALLOT, new org.apache.thrift.meta_data.FieldMetaData("ballot", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.MAX_REPLICA_COUNT, new org.apache.thrift.meta_data.FieldMetaData("max_replica_count", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PRIMARY, new org.apache.thrift.meta_data.FieldMetaData("primary", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.rpc_address.class)));
        tmpMap.put(_Fields.SECONDARIES, new org.apache.thrift.meta_data.FieldMetaData("secondaries", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.rpc_address.class))));
        tmpMap.put(_Fields.LAST_DROPS, new org.apache.thrift.meta_data.FieldMetaData("last_drops", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dsn.base.rpc_address.class))));
        tmpMap.put(_Fields.LAST_COMMITTED_DECREE, new org.apache.thrift.meta_data.FieldMetaData("last_committed_decree", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partition_configuration.class, metaDataMap);
    }

    public partition_configuration() {
    }

    public partition_configuration(
            String app_type,
            global_partition_id gpid,
            long ballot,
            int max_replica_count,
            dsn.base.rpc_address primary,
            List<dsn.base.rpc_address> secondaries,
            List<dsn.base.rpc_address> last_drops,
            long last_committed_decree) {
        this();
        this.app_type = app_type;
        this.gpid = gpid;
        this.ballot = ballot;
        setBallotIsSet(true);
        this.max_replica_count = max_replica_count;
        setMax_replica_countIsSet(true);
        this.primary = primary;
        this.secondaries = secondaries;
        this.last_drops = last_drops;
        this.last_committed_decree = last_committed_decree;
        setLast_committed_decreeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partition_configuration(partition_configuration other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetApp_type()) {
            this.app_type = other.app_type;
        }
        if (other.isSetGpid()) {
            this.gpid = new global_partition_id(other.gpid);
        }
        this.ballot = other.ballot;
        this.max_replica_count = other.max_replica_count;
        if (other.isSetPrimary()) {
            this.primary = new dsn.base.rpc_address(other.primary);
        }
        if (other.isSetSecondaries()) {
            List<dsn.base.rpc_address> __this__secondaries = new ArrayList<dsn.base.rpc_address>(other.secondaries.size());
            for (dsn.base.rpc_address other_element : other.secondaries) {
                __this__secondaries.add(new dsn.base.rpc_address(other_element));
            }
            this.secondaries = __this__secondaries;
        }
        if (other.isSetLast_drops()) {
            List<dsn.base.rpc_address> __this__last_drops = new ArrayList<dsn.base.rpc_address>(other.last_drops.size());
            for (dsn.base.rpc_address other_element : other.last_drops) {
                __this__last_drops.add(new dsn.base.rpc_address(other_element));
            }
            this.last_drops = __this__last_drops;
        }
        this.last_committed_decree = other.last_committed_decree;
    }

    public partition_configuration deepCopy() {
        return new partition_configuration(this);
    }

    @Override
    public void clear() {
        this.app_type = null;
        this.gpid = null;
        setBallotIsSet(false);
        this.ballot = 0;
        setMax_replica_countIsSet(false);
        this.max_replica_count = 0;
        this.primary = null;
        this.secondaries = null;
        this.last_drops = null;
        setLast_committed_decreeIsSet(false);
        this.last_committed_decree = 0;
    }

    public String getApp_type() {
        return this.app_type;
    }

    public partition_configuration setApp_type(String app_type) {
        this.app_type = app_type;
        return this;
    }

    public void unsetApp_type() {
        this.app_type = null;
    }

    /** Returns true if field app_type is set (has been assigned a value) and false otherwise */
    public boolean isSetApp_type() {
        return this.app_type != null;
    }

    public void setApp_typeIsSet(boolean value) {
        if (!value) {
            this.app_type = null;
        }
    }

    public global_partition_id getGpid() {
        return this.gpid;
    }

    public partition_configuration setGpid(global_partition_id gpid) {
        this.gpid = gpid;
        return this;
    }

    public void unsetGpid() {
        this.gpid = null;
    }

    /** Returns true if field gpid is set (has been assigned a value) and false otherwise */
    public boolean isSetGpid() {
        return this.gpid != null;
    }

    public void setGpidIsSet(boolean value) {
        if (!value) {
            this.gpid = null;
        }
    }

    public long getBallot() {
        return this.ballot;
    }

    public partition_configuration setBallot(long ballot) {
        this.ballot = ballot;
        setBallotIsSet(true);
        return this;
    }

    public void unsetBallot() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLOT_ISSET_ID);
    }

    /** Returns true if field ballot is set (has been assigned a value) and false otherwise */
    public boolean isSetBallot() {
        return EncodingUtils.testBit(__isset_bitfield, __BALLOT_ISSET_ID);
    }

    public void setBallotIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLOT_ISSET_ID, value);
    }

    public int getMax_replica_count() {
        return this.max_replica_count;
    }

    public partition_configuration setMax_replica_count(int max_replica_count) {
        this.max_replica_count = max_replica_count;
        setMax_replica_countIsSet(true);
        return this;
    }

    public void unsetMax_replica_count() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_REPLICA_COUNT_ISSET_ID);
    }

    /** Returns true if field max_replica_count is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_replica_count() {
        return EncodingUtils.testBit(__isset_bitfield, __MAX_REPLICA_COUNT_ISSET_ID);
    }

    public void setMax_replica_countIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_REPLICA_COUNT_ISSET_ID, value);
    }

    public dsn.base.rpc_address getPrimary() {
        return this.primary;
    }

    public partition_configuration setPrimary(dsn.base.rpc_address primary) {
        this.primary = primary;
        return this;
    }

    public void unsetPrimary() {
        this.primary = null;
    }

    /** Returns true if field primary is set (has been assigned a value) and false otherwise */
    public boolean isSetPrimary() {
        return this.primary != null;
    }

    public void setPrimaryIsSet(boolean value) {
        if (!value) {
            this.primary = null;
        }
    }

    public int getSecondariesSize() {
        return (this.secondaries == null) ? 0 : this.secondaries.size();
    }

    public java.util.Iterator<dsn.base.rpc_address> getSecondariesIterator() {
        return (this.secondaries == null) ? null : this.secondaries.iterator();
    }

    public void addToSecondaries(dsn.base.rpc_address elem) {
        if (this.secondaries == null) {
            this.secondaries = new ArrayList<dsn.base.rpc_address>();
        }
        this.secondaries.add(elem);
    }

    public List<dsn.base.rpc_address> getSecondaries() {
        return this.secondaries;
    }

    public partition_configuration setSecondaries(List<dsn.base.rpc_address> secondaries) {
        this.secondaries = secondaries;
        return this;
    }

    public void unsetSecondaries() {
        this.secondaries = null;
    }

    /** Returns true if field secondaries is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondaries() {
        return this.secondaries != null;
    }

    public void setSecondariesIsSet(boolean value) {
        if (!value) {
            this.secondaries = null;
        }
    }

    public int getLast_dropsSize() {
        return (this.last_drops == null) ? 0 : this.last_drops.size();
    }

    public java.util.Iterator<dsn.base.rpc_address> getLast_dropsIterator() {
        return (this.last_drops == null) ? null : this.last_drops.iterator();
    }

    public void addToLast_drops(dsn.base.rpc_address elem) {
        if (this.last_drops == null) {
            this.last_drops = new ArrayList<dsn.base.rpc_address>();
        }
        this.last_drops.add(elem);
    }

    public List<dsn.base.rpc_address> getLast_drops() {
        return this.last_drops;
    }

    public partition_configuration setLast_drops(List<dsn.base.rpc_address> last_drops) {
        this.last_drops = last_drops;
        return this;
    }

    public void unsetLast_drops() {
        this.last_drops = null;
    }

    /** Returns true if field last_drops is set (has been assigned a value) and false otherwise */
    public boolean isSetLast_drops() {
        return this.last_drops != null;
    }

    public void setLast_dropsIsSet(boolean value) {
        if (!value) {
            this.last_drops = null;
        }
    }

    public long getLast_committed_decree() {
        return this.last_committed_decree;
    }

    public partition_configuration setLast_committed_decree(long last_committed_decree) {
        this.last_committed_decree = last_committed_decree;
        setLast_committed_decreeIsSet(true);
        return this;
    }

    public void unsetLast_committed_decree() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAST_COMMITTED_DECREE_ISSET_ID);
    }

    /** Returns true if field last_committed_decree is set (has been assigned a value) and false otherwise */
    public boolean isSetLast_committed_decree() {
        return EncodingUtils.testBit(__isset_bitfield, __LAST_COMMITTED_DECREE_ISSET_ID);
    }

    public void setLast_committed_decreeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAST_COMMITTED_DECREE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case APP_TYPE:
                if (value == null) {
                    unsetApp_type();
                } else {
                    setApp_type((String) value);
                }
                break;

            case GPID:
                if (value == null) {
                    unsetGpid();
                } else {
                    setGpid((global_partition_id) value);
                }
                break;

            case BALLOT:
                if (value == null) {
                    unsetBallot();
                } else {
                    setBallot((Long) value);
                }
                break;

            case MAX_REPLICA_COUNT:
                if (value == null) {
                    unsetMax_replica_count();
                } else {
                    setMax_replica_count((Integer) value);
                }
                break;

            case PRIMARY:
                if (value == null) {
                    unsetPrimary();
                } else {
                    setPrimary((dsn.base.rpc_address) value);
                }
                break;

            case SECONDARIES:
                if (value == null) {
                    unsetSecondaries();
                } else {
                    setSecondaries((List<dsn.base.rpc_address>) value);
                }
                break;

            case LAST_DROPS:
                if (value == null) {
                    unsetLast_drops();
                } else {
                    setLast_drops((List<dsn.base.rpc_address>) value);
                }
                break;

            case LAST_COMMITTED_DECREE:
                if (value == null) {
                    unsetLast_committed_decree();
                } else {
                    setLast_committed_decree((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case APP_TYPE:
                return getApp_type();

            case GPID:
                return getGpid();

            case BALLOT:
                return getBallot();

            case MAX_REPLICA_COUNT:
                return getMax_replica_count();

            case PRIMARY:
                return getPrimary();

            case SECONDARIES:
                return getSecondaries();

            case LAST_DROPS:
                return getLast_drops();

            case LAST_COMMITTED_DECREE:
                return getLast_committed_decree();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case APP_TYPE:
                return isSetApp_type();
            case GPID:
                return isSetGpid();
            case BALLOT:
                return isSetBallot();
            case MAX_REPLICA_COUNT:
                return isSetMax_replica_count();
            case PRIMARY:
                return isSetPrimary();
            case SECONDARIES:
                return isSetSecondaries();
            case LAST_DROPS:
                return isSetLast_drops();
            case LAST_COMMITTED_DECREE:
                return isSetLast_committed_decree();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof partition_configuration)
            return this.equals((partition_configuration) that);
        return false;
    }

    public boolean equals(partition_configuration that) {
        if (that == null)
            return false;

        boolean this_present_app_type = true && this.isSetApp_type();
        boolean that_present_app_type = true && that.isSetApp_type();
        if (this_present_app_type || that_present_app_type) {
            if (!(this_present_app_type && that_present_app_type))
                return false;
            if (!this.app_type.equals(that.app_type))
                return false;
        }

        boolean this_present_gpid = true && this.isSetGpid();
        boolean that_present_gpid = true && that.isSetGpid();
        if (this_present_gpid || that_present_gpid) {
            if (!(this_present_gpid && that_present_gpid))
                return false;
            if (!this.gpid.equals(that.gpid))
                return false;
        }

        boolean this_present_ballot = true;
        boolean that_present_ballot = true;
        if (this_present_ballot || that_present_ballot) {
            if (!(this_present_ballot && that_present_ballot))
                return false;
            if (this.ballot != that.ballot)
                return false;
        }

        boolean this_present_max_replica_count = true;
        boolean that_present_max_replica_count = true;
        if (this_present_max_replica_count || that_present_max_replica_count) {
            if (!(this_present_max_replica_count && that_present_max_replica_count))
                return false;
            if (this.max_replica_count != that.max_replica_count)
                return false;
        }

        boolean this_present_primary = true && this.isSetPrimary();
        boolean that_present_primary = true && that.isSetPrimary();
        if (this_present_primary || that_present_primary) {
            if (!(this_present_primary && that_present_primary))
                return false;
            if (!this.primary.equals(that.primary))
                return false;
        }

        boolean this_present_secondaries = true && this.isSetSecondaries();
        boolean that_present_secondaries = true && that.isSetSecondaries();
        if (this_present_secondaries || that_present_secondaries) {
            if (!(this_present_secondaries && that_present_secondaries))
                return false;
            if (!this.secondaries.equals(that.secondaries))
                return false;
        }

        boolean this_present_last_drops = true && this.isSetLast_drops();
        boolean that_present_last_drops = true && that.isSetLast_drops();
        if (this_present_last_drops || that_present_last_drops) {
            if (!(this_present_last_drops && that_present_last_drops))
                return false;
            if (!this.last_drops.equals(that.last_drops))
                return false;
        }

        boolean this_present_last_committed_decree = true;
        boolean that_present_last_committed_decree = true;
        if (this_present_last_committed_decree || that_present_last_committed_decree) {
            if (!(this_present_last_committed_decree && that_present_last_committed_decree))
                return false;
            if (this.last_committed_decree != that.last_committed_decree)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_app_type = true && (isSetApp_type());
        list.add(present_app_type);
        if (present_app_type)
            list.add(app_type);

        boolean present_gpid = true && (isSetGpid());
        list.add(present_gpid);
        if (present_gpid)
            list.add(gpid);

        boolean present_ballot = true;
        list.add(present_ballot);
        if (present_ballot)
            list.add(ballot);

        boolean present_max_replica_count = true;
        list.add(present_max_replica_count);
        if (present_max_replica_count)
            list.add(max_replica_count);

        boolean present_primary = true && (isSetPrimary());
        list.add(present_primary);
        if (present_primary)
            list.add(primary);

        boolean present_secondaries = true && (isSetSecondaries());
        list.add(present_secondaries);
        if (present_secondaries)
            list.add(secondaries);

        boolean present_last_drops = true && (isSetLast_drops());
        list.add(present_last_drops);
        if (present_last_drops)
            list.add(last_drops);

        boolean present_last_committed_decree = true;
        list.add(present_last_committed_decree);
        if (present_last_committed_decree)
            list.add(last_committed_decree);

        return list.hashCode();
    }

    @Override
    public int compareTo(partition_configuration other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetApp_type()).compareTo(other.isSetApp_type());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetApp_type()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_type, other.app_type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGpid()).compareTo(other.isSetGpid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGpid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gpid, other.gpid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBallot()).compareTo(other.isSetBallot());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBallot()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ballot, other.ballot);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMax_replica_count()).compareTo(other.isSetMax_replica_count());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMax_replica_count()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_replica_count, other.max_replica_count);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPrimary()).compareTo(other.isSetPrimary());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPrimary()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary, other.primary);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSecondaries()).compareTo(other.isSetSecondaries());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSecondaries()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondaries, other.secondaries);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLast_drops()).compareTo(other.isSetLast_drops());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLast_drops()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_drops, other.last_drops);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLast_committed_decree()).compareTo(other.isSetLast_committed_decree());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLast_committed_decree()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_committed_decree, other.last_committed_decree);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("partition_configuration(");
        boolean first = true;

        sb.append("app_type:");
        if (this.app_type == null) {
            sb.append("null");
        } else {
            sb.append(this.app_type);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("gpid:");
        if (this.gpid == null) {
            sb.append("null");
        } else {
            sb.append(this.gpid);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("ballot:");
        sb.append(this.ballot);
        first = false;
        if (!first) sb.append(", ");
        sb.append("max_replica_count:");
        sb.append(this.max_replica_count);
        first = false;
        if (!first) sb.append(", ");
        sb.append("primary:");
        if (this.primary == null) {
            sb.append("null");
        } else {
            sb.append(this.primary);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("secondaries:");
        if (this.secondaries == null) {
            sb.append("null");
        } else {
            sb.append(this.secondaries);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("last_drops:");
        if (this.last_drops == null) {
            sb.append("null");
        } else {
            sb.append(this.last_drops);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("last_committed_decree:");
        sb.append(this.last_committed_decree);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
        if (gpid != null) {
            gpid.validate();
        }
        if (primary != null) {
            primary.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class partition_configurationStandardSchemeFactory implements SchemeFactory {
        public partition_configurationStandardScheme getScheme() {
            return new partition_configurationStandardScheme();
        }
    }

    private static class partition_configurationStandardScheme extends StandardScheme<partition_configuration> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, partition_configuration struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // APP_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.app_type = iprot.readString();
                            struct.setApp_typeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // GPID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.gpid = new global_partition_id();
                            struct.gpid.read(iprot);
                            struct.setGpidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // BALLOT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.ballot = iprot.readI64();
                            struct.setBallotIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // MAX_REPLICA_COUNT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.max_replica_count = iprot.readI32();
                            struct.setMax_replica_countIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // PRIMARY
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.primary = new dsn.base.rpc_address();
                            struct.primary.read(iprot);
                            struct.setPrimaryIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // SECONDARIES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.secondaries = new ArrayList<dsn.base.rpc_address>(_list0.size);
                                dsn.base.rpc_address _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = new dsn.base.rpc_address();
                                    _elem1.read(iprot);
                                    struct.secondaries.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setSecondariesIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // LAST_DROPS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                                struct.last_drops = new ArrayList<dsn.base.rpc_address>(_list3.size);
                                dsn.base.rpc_address _elem4;
                                for (int _i5 = 0; _i5 < _list3.size; ++_i5) {
                                    _elem4 = new dsn.base.rpc_address();
                                    _elem4.read(iprot);
                                    struct.last_drops.add(_elem4);
                                }
                                iprot.readListEnd();
                            }
                            struct.setLast_dropsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // LAST_COMMITTED_DECREE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.last_committed_decree = iprot.readI64();
                            struct.setLast_committed_decreeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, partition_configuration struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.app_type != null) {
                oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
                oprot.writeString(struct.app_type);
                oprot.writeFieldEnd();
            }
            if (struct.gpid != null) {
                oprot.writeFieldBegin(GPID_FIELD_DESC);
                struct.gpid.write(oprot);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(BALLOT_FIELD_DESC);
            oprot.writeI64(struct.ballot);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(MAX_REPLICA_COUNT_FIELD_DESC);
            oprot.writeI32(struct.max_replica_count);
            oprot.writeFieldEnd();
            if (struct.primary != null) {
                oprot.writeFieldBegin(PRIMARY_FIELD_DESC);
                struct.primary.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.secondaries != null) {
                oprot.writeFieldBegin(SECONDARIES_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.secondaries.size()));
                    for (dsn.base.rpc_address _iter6 : struct.secondaries) {
                        _iter6.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.last_drops != null) {
                oprot.writeFieldBegin(LAST_DROPS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.last_drops.size()));
                    for (dsn.base.rpc_address _iter7 : struct.last_drops) {
                        _iter7.write(oprot);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(LAST_COMMITTED_DECREE_FIELD_DESC);
            oprot.writeI64(struct.last_committed_decree);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class partition_configurationTupleSchemeFactory implements SchemeFactory {
        public partition_configurationTupleScheme getScheme() {
            return new partition_configurationTupleScheme();
        }
    }

    private static class partition_configurationTupleScheme extends TupleScheme<partition_configuration> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, partition_configuration struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetApp_type()) {
                optionals.set(0);
            }
            if (struct.isSetGpid()) {
                optionals.set(1);
            }
            if (struct.isSetBallot()) {
                optionals.set(2);
            }
            if (struct.isSetMax_replica_count()) {
                optionals.set(3);
            }
            if (struct.isSetPrimary()) {
                optionals.set(4);
            }
            if (struct.isSetSecondaries()) {
                optionals.set(5);
            }
            if (struct.isSetLast_drops()) {
                optionals.set(6);
            }
            if (struct.isSetLast_committed_decree()) {
                optionals.set(7);
            }
            oprot.writeBitSet(optionals, 8);
            if (struct.isSetApp_type()) {
                oprot.writeString(struct.app_type);
            }
            if (struct.isSetGpid()) {
                struct.gpid.write(oprot);
            }
            if (struct.isSetBallot()) {
                oprot.writeI64(struct.ballot);
            }
            if (struct.isSetMax_replica_count()) {
                oprot.writeI32(struct.max_replica_count);
            }
            if (struct.isSetPrimary()) {
                struct.primary.write(oprot);
            }
            if (struct.isSetSecondaries()) {
                {
                    oprot.writeI32(struct.secondaries.size());
                    for (dsn.base.rpc_address _iter8 : struct.secondaries) {
                        _iter8.write(oprot);
                    }
                }
            }
            if (struct.isSetLast_drops()) {
                {
                    oprot.writeI32(struct.last_drops.size());
                    for (dsn.base.rpc_address _iter9 : struct.last_drops) {
                        _iter9.write(oprot);
                    }
                }
            }
            if (struct.isSetLast_committed_decree()) {
                oprot.writeI64(struct.last_committed_decree);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, partition_configuration struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(8);
            if (incoming.get(0)) {
                struct.app_type = iprot.readString();
                struct.setApp_typeIsSet(true);
            }
            if (incoming.get(1)) {
                struct.gpid = new global_partition_id();
                struct.gpid.read(iprot);
                struct.setGpidIsSet(true);
            }
            if (incoming.get(2)) {
                struct.ballot = iprot.readI64();
                struct.setBallotIsSet(true);
            }
            if (incoming.get(3)) {
                struct.max_replica_count = iprot.readI32();
                struct.setMax_replica_countIsSet(true);
            }
            if (incoming.get(4)) {
                struct.primary = new dsn.base.rpc_address();
                struct.primary.read(iprot);
                struct.setPrimaryIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.secondaries = new ArrayList<dsn.base.rpc_address>(_list10.size);
                    dsn.base.rpc_address _elem11;
                    for (int _i12 = 0; _i12 < _list10.size; ++_i12) {
                        _elem11 = new dsn.base.rpc_address();
                        _elem11.read(iprot);
                        struct.secondaries.add(_elem11);
                    }
                }
                struct.setSecondariesIsSet(true);
            }
            if (incoming.get(6)) {
                {
                    org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.last_drops = new ArrayList<dsn.base.rpc_address>(_list13.size);
                    dsn.base.rpc_address _elem14;
                    for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                        _elem14 = new dsn.base.rpc_address();
                        _elem14.read(iprot);
                        struct.last_drops.add(_elem14);
                    }
                }
                struct.setLast_dropsIsSet(true);
            }
            if (incoming.get(7)) {
                struct.last_committed_decree = iprot.readI64();
                struct.setLast_committed_decreeIsSet(true);
            }
        }
    }

}

